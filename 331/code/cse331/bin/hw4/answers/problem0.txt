a. Write a pseudocode algorithm for multiplication:

r = p * q where p, q are polynomials:
    for each term t in p:
        for each term u in q
            r += new single digit polynomial s
            where s.coefficient = t.coefficient * r.coefficient
            where s.exponent = t.exponent + r.exponent


b. write a psuedocode algorithm for division

quotient = 0
remainder = numerator
while (remainder != 0) and remainder.degree() >= denominator.degree()
    temp = new poly s where s.coefficient = r.leading.coefficient / d.leading.coefficient
                        (where .leading is the leading term of the poly)
               and s.exp = r.leading.exp - d.leading.exp
    quotient = quotient + temp
    remainder = remainder - (temp * denominator)

return quotient


c show division algorithm running on (x^3+x-1) / (x+1)     [I will call them a and b]

a = numerator = x^3+x-1
b = x + 1
q = quotient = 0
r = remainder = copy of a
d = denominator = copy of b

while (r != 0 and r.degree() >= d.degree())
    [loop 1]
    t = new poly s, s.coefficient = (1/1) and s.exp = (3-1), so s = x^2
    q += t so q = (0 + x^2)
    r = x^3 +x -1 - (x^2 * (x + 1)) = -x^2 + x -1
    [loop 2]
    t = (-1 / 1) x^(2 -1) = -x
    q = x^2 - x
    r = -x^2 + x - 1 - (-x (x + 1)) =  2x - 1
    [loop 3]
    t = (2/1) x ^(1-1) = 2
    q = x^2 -x + 2
    r = 2x-1 - (2 (x + 1)
    r = -3
    [loop breaks]
return q so return x^2 -x +2
