Edge:
An Edge represents an edge between two nodes in the graph, with the Edge containing
a String label and the String key/destination for the Node in the graph it's pointing
at.

Graph:
main component is a HashMap<String, HashSet<Edge>>, meaning a node cannot have multiple identical edges.
I chose a HashMap so it will have a constant lookup time.

functions:
addNode(String data)
    obvious, need a way to add keys to the map;
addEdge(String parentNode, String edgeLabel, String childNode)
    need a way to add an edge between a parent and a child. I only enforce that the parent needs to be there,
    the child will be created if it doesn't exist
removeEdge(String parentNode, Edge edge)
    removes the edge from the parent node and returns if successful
contains(String data)
    checks if the node is present in the graph
isChild(String parent, String child)
    checks wether or not child is a child of parent, seemed helpful
listChildren(String parent)
    returns a set of all the children of the parent. Useful for traversing the graph.
getEdgesToChild(String parent, String child)
    will be useful for determining the "best" edge to a child if the label matters




I used to have a discreet Node class that was a wrapper around a String but
that got a little unwieldy.