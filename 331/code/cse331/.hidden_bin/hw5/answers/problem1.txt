1a. IntQueue1
Abstraction function:
* An IntQueue1 has the form [n1, n2, ..., n_k], where n1 is the
* least recently added integer, and n_k is the most recently added integer.
* IntQueue1 will dequeue in the order of n1 first, n2 second, ... and n_k kth.
* if there are no terms, IntQueue1 cannot be dequeued.

Rep invariant:
* IntQueue.size() >= 0
* IntQueue.get(i) where 0 <= i < IntQueue.size() will always be an integer
* IntQueue.get(i) will always be dequeued before IntQueue.get(i+1) //not sure if this belongs

1b. IntQueue2
Abstraction function:
* An IntQueue2 has the form [_, _, n1, n2, ..., n_k, _, _], where n1 is the
* least recently added integer, and n_k is the most recently added integer.
* IntQueue1 will dequeue in the order of n1 first, n2 second, ... and n_k kth.
* if there are no terms, IntQueue2 cannot be dequeued.
* a front integer keeps track of the index of front of the queue in the array,
* while a size integer keeps track of the size of the queue
* the queue ranges from entries[front], with entries[front] being the least
* recently added integer, to entries[(front + size - 1) % entries.length],
* with the entry at this index being the most recently added integer

Rep Invariant
size < entries.length
entries[front] is the least recently enqueued item
entries[(front+size -1 )% entries.length] is the most recently enqueued integer

2.
{a, d, g}, {c, f}, {b, h} are abstractly equivalent

3.
public int solveEquations(int x, int y, int z)
* Can't expose any representation, as int is a primitive
public String[] decode(boolean slowly)
* Could expose representation, but String is immutable, so for a String[], the elements would be immutable
* however, if String[] returned a non final field of String[], that String[] could be modified.
private Date myBirthday()
* Date is mutable, and if myBirthday returns a field and not a copy, it could be modified
public String toString()
* String is immutable
public Iterator<Integer> elements()
* Integers are immutable, so it doesn't matter
public Deck(List<Card> cards)
* cards could be modified after the Deck is instantiated if Deck just sets a field to cards.
* Deck should make a copy of cards.